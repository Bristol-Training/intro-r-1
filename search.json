[
  {
    "objectID": "pages/030-variables.html",
    "href": "pages/030-variables.html",
    "title": "Variables and data types",
    "section": "",
    "text": "We call variable to a symbolic name that refers to an object. They act as memory containers for storing data values and are created when you assign a value to them using the assignment operator &lt;- or =. For example, x &lt;- 5 assigns the integer value 5 to the variable x.\nThe value stored in a variable can change or vary throughout your program and can be any data type such as integers, strings, or lists. You will see different data types further in this section.\nname &lt;- \"Jean Golding\"\nage &lt;- 27\nweight &lt;- 76.4\n\n\n\n\n\n\nTipAssigment operators\n\n\n\nIn R, both = and &lt;- can be used as assignment operators, but they have some subtle differences in usage.\n\nThe = operator is a general assignment operator in R and it’s more commonly used in function arguments and within function calls. mean(x = c(1, 2, 3))\nThe &lt;- operator is the traditional and preferred assignment operator in R and has a higher precedence than =, which can be important in some contexts. x &lt;- 5\n\n\n\nChosing the correct name for a particular variable is an important task as a non-descriptive name (or worse, an incorrect name) will be very confusing for you and anyone reading your code. For instance, for a variable which contains a number representing a distance in miles, avoid shortened names like dm, distm or d and instead use a name like distance_miles. Remember, code will be written once but read many times so make it easy to read.\n\n\n\n\n\n\nTipVariable names\n\n\n\nWhen naming variables in R, there are specific rules to follow:\n\nVariable names can include letters (both uppercase and lowercase), digits, periods (.) and underscores (_), but they cannot start with a digit or underscore. Examples of valid variable names include my_var and var_2; invalid examples would be 2var (starts with a digit) or my-var (contains a hyphen).\nVariable names are case-sensitive, meaning myVariable, MyVariable, and MYVARIABLE would be considered different variables.",
    "crumbs": [
      "Variables and data types"
    ]
  },
  {
    "objectID": "pages/051-conditionals.html",
    "href": "pages/051-conditionals.html",
    "title": "Conditional if",
    "section": "",
    "text": "Conditional if statements allow programs to make decisions and execute different code based on whether certain conditions are TRUE or FALSE. For instance, we may want to perform a different action when a study participant is an adult or not:\nThe basic syntax for conditional statements is if (condition) {}, where condition is an expression that evaluates to either TRUE or FALSE, i.e. a boolean. If it’s TRUE, the indented code block under the if statement will run. If FALSE, it will be skipped. For example, the below code will print “You are an adult” if age is 18 or higher.\nage &lt;- 18\nif (age &gt;= 18) {\n    cat(\"You are an adult\")\n}\n\nYou are an adult\nYou can also add an else clause to specify code to run if the condition is FALSE:\nage &lt;- 17\nif (age &gt;= 18) {\n    cat(\"You are an adult\")\n} else {\n    cat(\"You are not an adult\")\n}\n\nYou are not an adult\nFor multiple conditions, you can use else if clauses to execute the first matching block.\nage &lt;- 14\nif (age &lt; 13) {\n    cat(\"You are a child\") \n} else if (age &lt; 18) {\n    cat(\"You are a teenager\")\n} else {\n    cat(\"You are an adult\")\n}\n\nYou are a teenager",
    "crumbs": [
      "Control structures",
      "Conditional if"
    ]
  },
  {
    "objectID": "pages/051-conditionals.html#ordering-your-options",
    "href": "pages/051-conditionals.html#ordering-your-options",
    "title": "Conditional if",
    "section": "Ordering your options",
    "text": "Ordering your options\nWhen working out which lines of code will be run, R will work down the list of if, else if and else and will run the first one that matches. Once it’s matched one, it will not bother checking to see if any of those later on would have matched. This means that you should order your questions from most-specific to least-specific.\nFor example, if you want to do one thing for positive numbers, but something special instead for numbers greater than 100, then you should put the more specific check first:\n\nmy_number &lt;- 73\n\nif (my_number &gt; 100) {\n    cat(my_number, \"is large\")\n} else if ( my_number &gt; 1) {\n    cat(my_number, \"is positive\")\n} else {\n    cat(my_number, \"negative\")\n}\n\n73 is positive\n\n\n\n\n\n\n\n\nNoteExercise\n\n\n\nCreate a file leap_year.R which calculates, for a given year, whether it is a leap year and prints out the answer. You might want to read the year in using input, or you could hard-code it in the program.\nThe rules to follow are:\n\nif the year is divisible by 400 then it’s a leap year,\notherwise, if the year is divisible by 100 then it’s not,\notherwise, if the year is divisible by 4 then it’s a leap year,\notherwise, it’s not.\n\nTo simplify the writing of the program, you might find it easier to start with the divisible-by-4 condition, then add in the divisible-by-100 check and then add in the divisible-by-400 calculation.\nFor reference, here are some years for you to check against:\n\n2023 - not a leap year as it’s not divisible by 4\n2024 - a leap year as it’s divisible by 4 (and not by 100)\n1900 - not a leap year as it’s divisible by 100 (and not by 400)\n2000 - a leap year as it’s divisible by 400\n\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\nWhenever solving a problem like this, it’s always good to build it up one step at a time. You could be tempted to jump right to the solution but it is easier to take small steps and check your results along the way than debugging a long piece of code.\n\nDivisible by 4\nThe first step is to implement the simplest of the logical checks: is the year divisible by 4? If it is, print out an appropriate message checking that it works for a know leap year.\n\n\n\nleap_year.r\n\nyear &lt;- 2024\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} \n\n\n2024 is a leap year\n\n\nFor a year that we know is not a leap year, what do we get:\n\n\n\nleap_year.r\n\nyear &lt;- 2023\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n}\n\n\nWe get no output, so let’s fix that next, by adding an else:\n\n\n\nleap_year.r\n\nyear &lt;- 2024\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2024 is a leap year\n\n\n\n\n\nleap_year.r\n\nyear &lt;- 2023\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2023 is not a leap year\n\n\nSo far it’s looking like it’s doing the right thing. We have a working leap year calculator which covers most cases correctly.\n\n\nDivisible by 100\nLet’s check the next corner case: what happens if the year is divisible by 100. The rules say that this should not be a leap year:\n\n\n\nleap_year.r\n\nyear &lt;- 1900\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n1900 is a leap year\n\n\nSo it’s currently getting this wrong. We need to add in a check to see if the year is divisible by 100 and set it to be labelled as not a leap year.\nHere we need to be careful as any number which is divisible by 100 is also divisible by 4 but we want a special thing to happen in the former case. The divisible-by-100 check is more specific than the divisible-by\\(4\\) check, so it must come first in the if-else if-else chain:\n\n\n\nleap_year.r\n\nyear &lt;- 2024\n\nif (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2024 is a leap year\n\n\n(omitting repeated code)\n\n\n2023 is not a leap year\n\n\n\n\n1900 is not a leap year\n\n\n\n\nDivisible by 400\nThe code is working for all those cases correctly, however, the last condition to think about is what happens for the year 2000:\n\n\n\nleap_year.r\n\nyear &lt;- 2000\n\nif (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2000 is not a leap year\n\n\nThis year should be a leap year as it is divisible by 400. Again this is more specific than the previous two so must be added before them in the chain:\n\n\n\nleap_year.r\n\nyear &lt;- 2024\n\nif (year %% 400 == 0) {\n    cat(year, \"is a leap year\")\n} else if (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2024 is a leap year\n\n\n(omitting repeated code)\n\n\n2023 is not a leap year\n\n\n\n\n1900 is not a leap year\n\n\n\n\n2000 is a leap year",
    "crumbs": [
      "Control structures",
      "Conditional if"
    ]
  },
  {
    "objectID": "pages/051-conditionals.html#combining-questions",
    "href": "pages/051-conditionals.html#combining-questions",
    "title": "Conditional if",
    "section": "Combining questions",
    "text": "Combining questions\nIt is possible to ask two or more questions in one go by combining them with and and or. So, if you want to check is a number is smaller than ten (my_number &lt; 10) and is not equal to zero (my_number != 0), you can use:\nif ( my_number&lt;10 & my_number!=0 ) :\n    ...\nThese combined checks can be used is both if and else if statements.\n\n\n\n\n\n\nNoteExercise\n\n\n\nCould you figure out how to rewrite leap_year.R with a single if-else statement?\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\n\nyear &lt;- 2024\n\nif ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n2024 is a leap year\n\n\n\n\n\nleap_year.R\n\nyear &lt;- 2023\n\nif ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2023 is not a leap year\n\n\n\n\n\nleap_year.R\n\nyear &lt;- 1900\n\nif ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n1900 is not a leap year\n\n\n\n\n\nleap_year.R\n\nyear &lt;- 2000\n\nif ( (!(year %% 100 == 0) & (year %% 4 == 0)) | (year %% 400 == 0) ) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2000 is a leap year",
    "crumbs": [
      "Control structures",
      "Conditional if"
    ]
  },
  {
    "objectID": "pages/052-for.html",
    "href": "pages/052-for.html",
    "title": "For loops",
    "section": "",
    "text": "It is possible to make R repeat certain lines of code using loops. The ability to run a line of code multiple times is the first large step on your road to making your code more structured and reusable.\nImagine we have three strings in a vector that we want to print. We could start by calling cat three times to create a program like:\nJean\n\n\nGolding\n\n\nInstitute\nThis printed the output we want. But you may feel that repeating the same call to cat is wasteful code, particularly if we want to repeat the same operation for many elements. If we can manage to write that line only once then we could save ourselves some typing and potentially make the code easier to read!\nWe can write a for loop in R which will perform a task once for each word in our vector:\nloop.R\n\nmy_words &lt;- c(\"Jean\", \"Golding\", \"Institute\")\n\nfor (word in my_words) {\n    cat(word, \" \")\n}\n\n\nJean  Golding  Institute\nEven in this tiny example, we have ve taken a script that was four lines of code and have reduced it to three lines, and more interestingly the same loop will work no matter how many items there are in the vector my_words.\nThis maps to real life where you may want, for example, to pay for each item on your shopping list. Another way of saying that could be “for each item on my shopping list, add its price to my total”, or as you would write that in R:\nIf we want to write more code after the end of a loop, we have to make sure that we have closed the curly braces. So this code will print:\nmy_words &lt;- c(\"Hello\", \"R\")\n\nfor (word in my_words) {\n    cat(word, \" \")\n}\n\nHello  R  \n\ncat(\"Goodbye \")\n\nGoodbye\nOn the contrary, the below code will print Goodbye in each iteration. This is because it was inside the body of the loop.\nmy_words &lt;- c(\"Hello\", \"R\")\n\nfor (word in my_words) {\n    cat(word, \" \")\ncat(\"Goodbye \")\n}\n\nHello  Goodbye R  Goodbye",
    "crumbs": [
      "Control structures",
      "For loops"
    ]
  },
  {
    "objectID": "pages/052-for.html#loop-over-a-range-of-numbers",
    "href": "pages/052-for.html#loop-over-a-range-of-numbers",
    "title": "For loops",
    "section": "Loop over a range of numbers",
    "text": "Loop over a range of numbers\nThere’s a built in operator in R : which provides you with numbers (integers) in a range. When given two numbers, e.g. 1:10, it will give you integers, starting from the first one and going up (or down) to the number you gave in second place. We can use this directly into our loop as the object to loop over and it will print:\n\nfor (number in 1:10) {\n    cat(number, \" \")\n}\n\n1  2  3  4  5  6  7  8  9  10  \n\n\nWe can also loop over a range of numbers in descending order.\n\nfor (number in 5:-5) {\n    cat(number, \" \")\n}\n\n5  4  3  2  1  0  -1  -2  -3  -4  -5  \n\n\n\n\n\n\n\n\nNoteExercise\n\n\n\nGiven the matrix below, write a loop that prints only the elements in columns 1 and 3, and rows 1 to 4..\n\nmy_matrix &lt;- t(matrix(1:25, nrow = 5, ncol = 5))\n\nprint(my_matrix)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n[3,]   11   12   13   14   15\n[4,]   16   17   18   19   20\n[5,]   21   22   23   24   25\n\n\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\n\nmy_matrix &lt;- t(matrix(1:25, nrow = 5, ncol = 5))\n\nfor (i in 1:4) {\n    for (j in c(1,3)) {\n        cat(my_matrix[i,j], \" \")\n    }\n    cat(\"\\n\")\n}\n\n1  3  \n6  8  \n11  13  \n16  18",
    "crumbs": [
      "Control structures",
      "For loops"
    ]
  },
  {
    "objectID": "pages/070-practical.html",
    "href": "pages/070-practical.html",
    "title": "Worksheet",
    "section": "",
    "text": "This page contains a number of exercises to give you a chance to practise what you have learned this session. You should create a new .R R file for each of them.\n\n\n\n\n\n\nNoteExercise 1\n\n\n\nCreate a list containing 5 different animal types, for example:\n\ncat\ndog\nelephant\nminnow\nbeaver\n\nPrint out the list to the screen.\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\n\n\n\nexercise1.r\n\nanimal_list &lt;- c(\"cat\", \"dog\", \"elephant\", \"minnow\", \"beaver\")\n\ncat(animal_list)\n\n\ncat dog elephant minnow beaver\n\n\n\n\n\n\n\n\n\n\n\nNoteExercise 2\n\n\n\nStart by copying the code that you used to create the list of animals in the last exercise. Write a loop which will print out each of the animals, prefixed with Species:. For example the output could look like:\nSpecies: cat\nSpecies: dog\nSpecies: elephant\nSpecies: minnow\nSpecies: beaver\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\n\n\n\nexercise2.r\n\nanimal_list &lt;- c(\"cat\", \"dog\", \"elephant\", \"minnow\", \"beaver\")\n\nfor (animal in animal_list) {\n    cat(\"Species:\", animal, \"\\n\")\n}\n\n\nSpecies: cat \nSpecies: dog \nSpecies: elephant \nSpecies: minnow \nSpecies: beaver \n\n\n\n\n\n\n\n\n\n\n\nNoteExercise 3\n\n\n\nCreate a list containing 10 different numbers, ranging from 0 to 100. For example: 65, 54, 17, 78, 66, 24, 32, 80, 79, 95.\nWrite a loop which will print out only those numbers which are larger than 50.\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\n\n\n\nexercise3.r\n\nmy_numbers &lt;- c(65, 54, 17, 78, 66, 24, 32, 80, 79, 95)\n\nfor (num in my_numbers) {\n    if (num &gt; 50) {\n        cat(num,\"\")\n    }\n}\n\n\n65 54 78 66 80 79 95 \n\n\n\n\n\n\n\n\n\n\n\nNoteExercise 4\n\n\n\nCreate a loop which iterates over the numbers from 1 to 20 (inclusive). Inside the loop: - if the number is divisible by three then print “ook”, - if the number is divisible by both three and five then print “foo”, - and if the number is not divisible by either then just print the number.\nHint: You can use the % operator to find the remainder from a division. Also, take care in the order that you do your if-else.\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\nWhen creating a chain of if-else if-else, you should put the most specific checks first. Otherwise they will be swamped by the more general checks.\n\n\n\nexercise4.r\n\nfor (i in 1:21) {\n    if ((i%%3)==0 & (i%%5)==0) {\n        cat(\"foo\", \"\")\n    } else if ((i%%3)==0) {\n        cat(\"ook\", \"\")\n    } else {\n        cat(i, \"\")\n    }\n}\n\n\n1 2 ook 4 5 ook 7 8 ook 10 11 ook 13 14 foo 16 17 ook 19 20 ook",
    "crumbs": [
      "Worksheet"
    ]
  },
  {
    "objectID": "pages/990-contributors.html",
    "href": "pages/990-contributors.html",
    "title": "Contributors",
    "section": "",
    "text": "This course has been developed by the Jean Golding Insitute.\nPart of these materials were originally written by Christopher Woods https://chryswoods.com/beginning_r/,",
    "crumbs": [
      "Contributors"
    ]
  },
  {
    "objectID": "pages/053-while.html",
    "href": "pages/053-while.html",
    "title": "While loop",
    "section": "",
    "text": "We have seen that for loops can repeatedly execute a block of code for each element specified. We can think of another scenario where we only want to continue executing a block of code as long as a given condition is TRUE. The basic idea is:\n    WHILE there is money in my account\n        have lunch out\n        update my bank statement\nIn while loops the condition is checked at the beginning of each iteration and the loop continues executing as long as the condition is TRUE. The basic syntax in R which has a similar scaffolding to an if clause:\nwhile (condition) {\n    # code to execute while condition is True\n}\nTo ensure that the condition will eventually become FALSE, it is common usage to increment/decrement a counter variable in the loop body:\n\ncount &lt;- 0\nwhile ( count &lt; 5 ) {\n    cat(count, \" \")\n    count &lt;- count + 1\n}\n\n0  1  2  3  4  \n\n\nThere are some extra flow control instructions in while loops that we are not going to see here in detail but it is important to mention them. They are:\n\nbreak: exits the loop immediately\nnext: skips the rest of the current iteration and moves to the next\n\nwhile (TRUE) {\n    user_input &lt;- readline(\"Enter 'q' to quit: \")\n    if (user_input == 'q') {\n        break\n    }\n}\n\n\n\n\n\n\nNoteExercise\n\n\n\nGiven a list of students sorted by name\nstudents &lt;- c(\"Alice\", \"Bob\", \"Charlie\", \"Frank\", \"George\", \"Hannah\", \"Julia\", \"Mia\", \"Noah\", \"Olivia\")\ncreate a script while.R that prints the names of students starting with letters before ‘M’ in the alphabet.\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\nNote in the below script that the while loop needs to take into account two different conditions:\n\nThat the student’s name starts with a letter before ‘M’\nThat we don’t try to index an element out of range in students\n\n\nstudents &lt;- c(\"Alice\", \"Bob\", \"Charlie\", \"Frank\", \"George\", \"Hannah\", \"Julia\", \"Mia\", \"Noah\", \"Olivia\")\n\n# Initialize the index\ni &lt;- 1\n\n# While loop to print names before 'M'\nwhile (i&lt;length(students) & students[i]&lt;\"M\") {\n    cat(students[i], \" \")\n    i &lt;- i + 1\n}\n\nAlice  Bob  Charlie  Frank  George  Hannah  Julia",
    "crumbs": [
      "Control structures",
      "While loop"
    ]
  },
  {
    "objectID": "pages/060-data.html",
    "href": "pages/060-data.html",
    "title": "Reading data",
    "section": "",
    "text": "So far, all the code we’ve run is somewhat static. Variables get assinged a value in the script and very time we run it, the output is always be the same. We will see a lot more of this throughout this workshop, but for now we will introduce one more function that R provides, read.csv.\nThe print and cat functions are one way of how we get information out of our program, and the read.csv function is a way of getting data into it. The function will open and read a Comma-Separated Values (csv) file, parse it, and assign the data to a variable on the left hand side of the &lt;-.\nWe will load a dataset of a study about gene expression data of 42 ER- and ER+ breast cancer patients\n\n\n\nread_csv.r\n\nbreast &lt;- read.csv(\"https://raw.githubusercontent.com/Bristol-Training/intro-r-1/refs/heads/main/data/GDS3716.soft\",\n            sep=\"\\t\",\n            skip=99)\n\nprint(breast[1:10,1:5])\n\n\n      ID_REF IDENTIFIER GSM512539 GSM512540 GSM512541\n1  1007_s_at    MIR4640    2461.4    3435.7    1932.5\n2    1053_at       RFC2      26.7     159.0      31.2\n3     117_at      HSPA6      82.6     243.4     150.2\n4     121_at       PAX8     942.3     897.5     840.8\n5  1255_g_at     GUCA1A      71.8      87.9      75.4\n6    1294_at    MIR5193     630.2     571.4     346.3\n7    1316_at       THRA     186.0     208.7     141.0\n8    1320_at     PTPN21      15.8      18.0      10.6\n9  1405_i_at       CCL5      71.3      26.1      26.3\n10   1431_at     CYP2E1      58.7      45.0      98.3\n\n\n\n\n\n\n\n\nNoteExercise\n\n\n\nUsing the breast cancer dataser, modify read_csv.R to print the average expresion of the gene TP53.\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\n#| filename: read_csv.r\n\nbreast &lt;- read.csv(\"https://raw.githubusercontent.com/Bristol-Training/intro-r-1/refs/heads/main/data/GDS3716.soft\",\n            sep=\"\\t\",\n            skip=100)\n\nwhich(breast$IDENTIFIER == \"TP53\") #returns  1274 10723\n\nv1 &lt;- breast[1274,-c(1,2)]\nmean(as.numeric(v1)) # 310.8952\n\nv2 &lt;- breast[10723,-c(1,2)]\nmean(as.numeric(v2)) # 17.15714",
    "crumbs": [
      "Reading data"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to Beginning R course! This course is designed for individuals with no prior programming experience, aiming to introduce you to the fundamentals of R, a popular programming languages among researchers, data scientists, and statisticians across various fields due to its statistical prowess, visualization capabilities, and extensive package ecosystem.\nA programming language is a formal system of instructions used to create computer applications. In other words, it allows humans to communicate with computers by providing a way for writing instructions that can be executed by a machine. This course is going to show you to give instructions to the computer to perform simple tasks and as you become more confident and follow the later courses, you will find that you are able to write much more complex applications.\nTo get started, you’ll need to install R and RStudio on your computer. Don’t worry - we’ll guide you through the setup process in the next section.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#how-to-read-this-documentation",
    "href": "index.html#how-to-read-this-documentation",
    "title": "Introduction",
    "section": "How to read this documentation",
    "text": "How to read this documentation\nIn this documentation, any time that we are seeing a small snippet of R code, we’ll see it written in a grey box like the following:\ncat(\"Hello, R\")\nIf the commands are executed by the machine we will see the output of them below enclosed on a vertical purple line:\n\ncat(\"Hello, R!\")\n\nHello, R!\n\n\nBy contrast, you will see larger pices of code as scripts with a given name, e.g. script.R, in a code block with darker header:\n\n\nscript.R\n\nname &lt;- \"Jean Golding\"\ncat(\"Hello,\", name, \"!\")\n\nWe may ask you to run a script using the Command Prompt (Windows) or Terminal (Mac and Linux). We will show you what commands to run and will look like this:\n\n\nTerminal/Command Prompt\n\nRscript script.R\n\nIn some cases we will introduce general programming concepts and structures using pseudocode, a high-level, easy-to-read syntax close to natural language. This should not be confused with R code and cannot be executed on your machine, but it is useful to describe how your code should behave. Here there is an example:\nFOR EACH sample IN my_study\n    IF (sample.value &gt; 100)\n        DO SOMETHING\n    OTHERWISE\n        DO SOMETHING ELSE\nThere are some exercices along this course, and it is important you try to answer them yourself to understand how R works. Exercises are shown in blue boxes followed by a yellow box that contains the answer of each exercise. We recommend you to try to answer each exercise yourself before looking at the solution.\n\n\n\n\n\n\nNoteExercise\n\n\n\nThis is an exercise. You will need to click in the below box to see the answer.\n\n\n\n\n\n\n\n\nCautionAnswer (click to open)\n\n\n\n\n\nThis is the answer.\n\n\n\nLast, we will highlight important points using green boxes like this one:\n\n\n\n\n\n\nTipKey points\n\n\n\nThese are important concepts and technical notes.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "answers/ranswer_more_conditionals.html",
    "href": "answers/ranswer_more_conditionals.html",
    "title": "Intro to R (Part 1)",
    "section": "",
    "text": "Less than:\n\nmy_number &lt;- 74\n\nif (my_number &lt; 100) {\n    cat(my_number, \"is less than 100\")\n}\n\n74 is less than 100\n\n\n\nEqual to:\n\nmy_number &lt;- 74\n\nif (my_number == 100) {\n    cat(my_number, \"== 100\") }\nif (my_number == 74) {\n    cat(my_number, \"== 74\") }\n\n74 == 74\n\n\n\nNot equal to:\n\nmy_number &lt;- 74\n\nif (my_number != 100) {\n    cat(my_number, \"!= 100\")\n}\n\n74 != 100\n\nif (my_number != 74) {\n    cat(my_number, \"!= 74\")\n}"
  },
  {
    "objectID": "answers/answer_if_leap_year.html",
    "href": "answers/answer_if_leap_year.html",
    "title": "Intro to R (Part 1)",
    "section": "",
    "text": "Whenever solving a problem like this, it’s always good to build it up one step at a time. You could be tempted to jump right to the solution but it is easier to take small steps and check your results along the way than debugging a long piece of code.\n\nDivisible by 4\nThe first step is to implement the simplest of the logical checks: is the year divisible by 4? If it is, print out an appropriate message checking that it works for a know leap year.\n\n\n\nleap_year.r\n\nyear &lt;- 2024\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} \n\n\n2024 is a leap year\n\n\nFor a year that we know is not a leap year, what do we get:\n\n\n\nleap_year.r\n\nyear &lt;- 2023\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n}\n\n\nWe get no output, so let’s fix that next, by adding an else:\n\n\n\nleap_year.r\n\nyear &lt;- 2024\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2024 is a leap year\n\n\n\n\n\nleap_year.r\n\nyear &lt;- 2023\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2023 is not a leap year\n\n\nSo far it’s looking like it’s doing the right thing. We have a working leap year calculator which covers most cases correctly.\n\n\nDivisible by 100\nLet’s check the next corner case: what happens if the year is divisible by 100. The rules say that this should not be a leap year:\n\n\n\nleap_year.r\n\nyear &lt;- 1900\n\nif (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n1900 is a leap year\n\n\nSo it’s currently getting this wrong. We need to add in a check to see if the year is divisible by 100 and set it to be labelled as not a leap year.\nHere we need to be careful as any number which is divisible by 100 is also divisible by 4 but we want a special thing to happen in the former case. The divisible-by-100 check is more specific than the divisible-by\\(4\\) check, so it must come first in the if-else if-else chain:\n\n\n\nleap_year.r\n\nyear &lt;- 2024\n\nif (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2024 is a leap year\n\n\n(omitting repeated code)\n\n\n2023 is not a leap year\n\n\n\n\n1900 is not a leap year\n\n\n\n\nDivisible by 400\nThe code is working for all those cases correctly, however, the last condition to think about is what happens for the year 2000:\n\n\n\nleap_year.r\n\nyear &lt;- 2000\n\nif (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2000 is not a leap year\n\n\nThis year should be a leap year as it is divisible by 400. Again this is more specific than the previous two so must be added before them in the chain:\n\n\n\nleap_year.r\n\nyear &lt;- 2024\n\nif (year %% 400 == 0) {\n    cat(year, \"is a leap year\")\n} else if (year %% 100 == 0) {\n    cat(year, \"is not a leap year\")\n} else if (year %% 4 == 0) {\n    cat(year, \"is a leap year\")\n} else {\n    cat(year, \"is not a leap year\")\n}\n\n\n2024 is a leap year\n\n\n(omitting repeated code)\n\n\n2023 is not a leap year\n\n\n\n\n1900 is not a leap year\n\n\n\n\n2000 is a leap year"
  },
  {
    "objectID": "answers/answer_calculator.html",
    "href": "answers/answer_calculator.html",
    "title": "Intro to R (Part 1)",
    "section": "",
    "text": "calc.R could look like:\n#| filename: calc.r\n#| eval: false\n\ncalculation &lt;- input(\"&gt; \")\n\nparts &lt;- calculation.split()  # Split e.g. \"4 * 6\" into [\"4\", \"*\", \"6\"]\nlhs &lt;- int(parts[0])  # Extract e.g. \"4\" and turn it into 4\noperation &lt;- parts[1]  # Extract e.g. \"*\"\nrhs &lt;- int(parts[2])  # Extract e.g. \"6\" and turn it into 6\n\nif operation == \"+\":\n    cat(calculation, \"is\", lhs + rhs)\n} else if ( operation == \"-\":\n    cat(calculation, \"is\", lhs - rhs)\n} else if ( operation == \"*\":\n    cat(calculation, \"is\", lhs * rhs)\n} else if ( operation == \"/\":\n    cat(calculation, \"is\", lhs / rhs)\n#| echo: false\n\ndef calculator(calculation):\n    cat(\"&gt; \" + calculation)\n    parts &lt;- calculation.split()  # Split e.g. \"4 * 6\" into [\"4\", \"*\", \"6\"]\n    lhs &lt;- int(parts[0])  # Extract e.g. \"4\" and turn it into 4\n    operation &lt;- parts[1]  # Extract e.g. \"*\"\n    rhs &lt;- int(parts[2])  # Extract e.g. \"6\" and turn it into 6\n\n    if operation == \"+\":\n        cat(calculation, \"is\", lhs + rhs)\n    } else if ( operation == \"-\":\n        cat(calculation, \"is\", lhs - rhs)\n    } else if ( operation == \"*\":\n        cat(calculation, \"is\", lhs * rhs)\n    } else if ( operation == \"/\":\n        cat(calculation, \"is\", lhs / rhs)\n\n\nTerminal/Command Prompt\n\nR calc.r\n\n#| echo: false\ncalculation &lt;- \"4 * 6\"\ncalculator(calculation)\n#| echo: false\ncalculation &lt;- \"5 + 6\"\ncalculator(calculation)\n#| echo: false\n\ncalculation &lt;- \"457 - 75\"\ncalculator(calculation)\n#| echo: false\ncalculation &lt;- \"54 / 3\"\ncalculator(calculation)\nThe code above works fine, but there’s always more than one way to approach a problem like this.\n\nSeparating calculation from output\nOne thing that we could improve would be the repetition in the print lines. Each of them are almost the same as each other and if we wanted to change the output from\n4 * 6 is 24\nto something like\n4 * 6 &lt;- 24\nthen we’d have to edit all four lines of code.\nRemembering our three-part pattern from earlier in the course of input→calculation→output, it’s a good idea to split out the calculation of data from the printing and display of data. In our case we could change it to look like:\n#| filename: calc.r\n#| eval: false\n\ncalculation &lt;- input(\"&gt; \")\n\n# Prepare the parts\nparts &lt;- calculation.split()\nlhs &lt;- int(parts[0])\noperation &lt;- parts[1]\nrhs &lt;- int(parts[2])\n\n# Calculate the answer\nif operation == \"+\":\n    result &lt;- lhs + rhs\n} else if ( operation == \"-\":\n    result &lt;- lhs - rhs\n} else if ( operation == \"*\":\n    result &lt;- lhs * rhs\n} else if ( operation == \"/\":\n    result &lt;- lhs / rhs\n\n# Output the result\ncat(calculation, \"is\", result)\n#| filename: calc.r\n#| echo: false\n\ndef calculator(calculation):\n\n    cat(\"&gt; \" + calculation)\n    # Prepare the parts\n    parts &lt;- calculation.split()\n    lhs &lt;- int(parts[0])\n    operation &lt;- parts[1]\n    rhs &lt;- int(parts[2])\n\n    # Calculate the answer\n    if operation == \"+\":\n        result &lt;- lhs + rhs\n    } else if ( operation == \"-\":\n        result &lt;- lhs - rhs\n    } else if ( operation == \"*\":\n        result &lt;- lhs * rhs\n    } else if ( operation == \"/\":\n        result &lt;- lhs / rhs\n\n    # Output the result\n    cat(calculation, \"is\", result)\n\n\nTerminal/Command Prompt\n\nR calc.r\n\n#| echo: false\ncalculation &lt;- \"4 * 6\"\ncalculator(calculation)\n#| echo: false\ncalculation &lt;- \"5 + 6\"\ncalculator(calculation)\n#| echo: false\n\ncalculation &lt;- \"457 - 75\"\ncalculator(calculation)\n#| echo: false\ncalculation &lt;- \"54 / 3\"\ncalculator(calculation)"
  },
  {
    "objectID": "answers/ranswer_first_loop.html",
    "href": "answers/ranswer_first_loop.html",
    "title": "Intro to R (Part 1)",
    "section": "",
    "text": "Adding more items to the list makes the loop go around more times\n\nmy_words &lt;- c(\"Hello\", \"R\", \"Goodbye\", \"R\")\n\nfor (word in my_words) {\n    cat(word, \" \")\n}\n\nHello  R  Goodbye  R  \n\n\nA vector cannot have a mixture of data types, so all elements are converted to strings.\n\nmy_words &lt;- c(\"Hello\", \"R\", as.numeric(404), \"Goodbye\", \"R\", 42)\n\nfor (word in my_words) {\n    cat(word, \"-\", class(word), \"\\n\")\n}\n\nHello - character \nR - character \n404 - character \nGoodbye - character \nR - character \n42 - character \n\n\nLooping over an empty list does not print anything\n\nmy_words &lt;- vector()\n\nfor (word in my_words) {\n    cat(word, \" \")\n}"
  },
  {
    "objectID": "answers/ranswer_loop_list_string.html",
    "href": "answers/ranswer_loop_list_string.html",
    "title": "Intro to R (Part 1)",
    "section": "",
    "text": "Starting with a vector of string, each item gets printed once.\n\nmy_words &lt;- c(\"Hello\", \"R\", \"!\")\n\nfor (word in my_words) {\n    cat(word, \" \")\n}\n\nHello  R  !  \n\n\nWe can also loop over a range of numbers.\n\nfor (number in 5:-5) {\n    cat(number, \" \")\n}\n\n5  4  3  2  1  0  -1  -2  -3  -4  -5"
  },
  {
    "objectID": "pages/020-hello-R.html",
    "href": "pages/020-hello-R.html",
    "title": "Hello, R!",
    "section": "",
    "text": "R is a scripting language, meaning that commands are interpreted at runtime rather than translated into machine code (compiled) beforehand. The simplest way to run a command in R is making use of the R command line. Follow these steps:\nR version 4.4.0 (2024-04-24) -- \"Puppy Cup\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: aarch64-apple-darwin20\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n&gt;\nYou can do the same directly on the tab Console in RStudio. In fact, RStudio just did the step of opening R for us.\nTo exit the R interpreter, type q(). Note, that if you do this in RStudio you will close the program.",
    "crumbs": [
      "Hello, R!"
    ]
  },
  {
    "objectID": "pages/020-hello-R.html#scripts",
    "href": "pages/020-hello-R.html#scripts",
    "title": "Hello, R!",
    "section": "Scripts",
    "text": "Scripts\nA R script is a simple text file containing a set of instructions. Scripts allow us to save instructions to automate repetitive tasks, streamline processes, and perform specific functions without manual intervention. This is called batch processing. R will read your script, starting at the top and running each line of code until it reaches the bottom.\nYou can write script files using any text editor. Here we are going to use RStudio, so let’s start by going to the text editor panel in RStudio and type into it:\ncat(\"Hello, R!\")\nThen go to File → Save and give it a more descriptive name. R files end in the extension “.R” so change its name to “script.R”. In the far right panel you will see a list of files, and you should be able to see script.R.\nTo run the script that we’ve just written and saved, we move to the editor and click the Run button on the top right side. This will execute the command in the current line or selected lines. You can also write or paste commands directly on the R Console tab, try it as well.\n\n\n\n\n\n\nTipNote that\n\n\n\n\nAlways give your R scripts a “.R” extension\nIn RStudio, R code goes in the text editor window while you run the code on the console or the terminal tabs.\n\n\n\nAlternative, we can use the Terminal to run a script. The only command we need to know about here is RScript which we run by typing Rscript in that window, followed by a space, followed by the name of our script file (including the “.R” extension) and then pressing Enter:\n\n\nTerminal/Command Prompt\n\nRScript script.R\n\nIf you do that you should see, printed to the terminal:\n\n\n\nscript.R\n\ncat(\"Hello, R!\")\n\n\nHello, R!\n\n\nCongratulations, you’ve just written and executed your very first R script!",
    "crumbs": [
      "Hello, R!"
    ]
  },
  {
    "objectID": "pages/020-hello-R.html#commenting-your-script",
    "href": "pages/020-hello-R.html#commenting-your-script",
    "title": "Hello, R!",
    "section": "Commenting your script",
    "text": "Commenting your script\nIt is good practice to add comments to your code so it is easy to understand by other programmers or even yourself after a few months. This is particularly important if there’s anything non-obvious in your code. To add a comments you can use a # symbol at any position in your script, what is behind ‘#’ will be ignored by R when running that line of code.\n\n\n\ncolour.r\n\n# This script asks for your favourite colour\nfav &lt;- \"blue\"\n\n# cat(\"Don't print me!\") \n\ncat(\"My favourite colour is\", fav) # print my favourite colour\n\n\nMy favourite colour is blue",
    "crumbs": [
      "Hello, R!"
    ]
  },
  {
    "objectID": "pages/031-basic-data-types.html",
    "href": "pages/031-basic-data-types.html",
    "title": "Basic data types",
    "section": "",
    "text": "In R we have several built-in basic data types. The most common types of data that you will find are numbers, characters and booleans.\n\n\n\n\n\n\nTipKey points\n\n\n\n\nR is dynamically typed, meaning you don’t need to declare the type of a variable explicitly.\nYou can use the class() function to check the data type of a variable.\nData types determine what operations can be performed on the data.\nYou can convert between different data types using built-in functions like as.integer(), as.numeric() and as.character()\n\n\n\n\nNumeric Types\n\n\n\nDescription\nType\nExample\n\n\n\n\nintegers or whole numbers\ninteger\na &lt;- as.integer(12)\n\n\nfloating-point numbers\nnumeric\nb &lt;- as.numeric(7.3)\n\n\ncomplex numbers\ncomplex\nc &lt;- as.complex(2i + 7)\n\n\n\na &lt;- 12L\nb &lt;- 7.3\nc &lt;- 2i + 7\n\ncat(\"A:\", a, class(a))\ncat(\"B:\", b, class(b))\ncat(\"C:\", c, class(c))\n\n\nA: 12 integer\n\n\nB: 7.3 numeric\n\n\nC: 7+2i complex\n\n\n\n\nText Types\n\n\n\nDescription\nType\nExample\n\n\n\n\ntextual data (strings)\ncharacter\na &lt;- \"Jean Golding\"\n\n\n\n\nname &lt;- \"Jean Golding\"\ncat(\"Name:\", name, class(name))\n\nName: Jean Golding character\n\n\n\n\n\n\n\n\nTipNote that\n\n\n\nIt’s important that when writing numbers in your scripts, you do not put quotation marks around them, otherwise they will be recognized by the R interpreter as strings. There is a difference between 3.14159 and “3.14159”, the first is a number and the second is just a string of characters.\n\npi &lt;- 3.14159\ncat(\"pi:\", pi, class(pi))\n\npi: 3.14159 numeric\n\n\n\npi &lt;- \"3.14159\"\ncat(\"pi:\", pi, class(pi))\n\npi: 3.14159 character\n\n\n\n\n\n\nBoolean Types\n\n\n\nDescription\nType\nExample\n\n\n\n\nboolean values (True or False)\nboolean\na &lt;- TRUE\n\n\n\n\na &lt;- 23\nb &lt;- 2\nc &lt;- a != b\n\ncat(\"C:\", c, class(c))\n\nC: TRUE logical\n\n\n\n\n\n\n\n\nNoteExercise\n\n\n\nWithout using R, can you tell what is the data type of these variables?\nx &lt;- 32\nnumber_of_participants &lt;- \"1017\"\nFriday &lt;- TRUE\ny &lt;- 1L\na &lt;- 10&lt;8\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\nx is a numeric (float)\nnumber_of_participants is a string\nFriday is a boolean\ny is an integer\na is a boolean",
    "crumbs": [
      "Variables and data types",
      "Basic data types"
    ]
  },
  {
    "objectID": "pages/033-data-structures.html",
    "href": "pages/033-data-structures.html",
    "title": "Data structures",
    "section": "",
    "text": "Until now all the variables we have used have contained a single piece of information, for example, a &lt;- 4 makes a variable a containing a single number, 4. It’s very common to want to refer to collections of data. You can think, for example, of a bank statement that contains the list of expenses you had last month.\nR has several build-in data structures that facilitate working with this common kind of data. In this beginners course we will four of the most used data structures: vector, list, matrix and data.frame. But keep in mind there are other built-in data structures.",
    "crumbs": [
      "Variables and data types",
      "Data structures"
    ]
  },
  {
    "objectID": "pages/033-data-structures.html#data-frames",
    "href": "pages/033-data-structures.html#data-frames",
    "title": "Data structures",
    "section": "Data Frames",
    "text": "Data Frames\nData frames are table-like structures that can contain columns of different data types. They are one of the most commonly used data structures for data analysis in R. Note that all the columns in a data frame have the same number of elements.\n\ndf &lt;- data.frame(\n  name = c(\"Jean\", \"Thomas\", \"Daniel\"),\n  age = c(25, 30, 35),\n  is_student = c(TRUE, FALSE, FALSE)\n)\n\nYou can access data frame columns using the $ operator or square brackets []:\n\ncat(df$name)\n\nJean Thomas Daniel\n\n\n\ncat(df[, \"age\"])\n\n25 30 35\n\n\nYou can also access the a data frame by rows\n\nprint(df[2, ])\n\n    name age is_student\n2 Thomas  30      FALSE\n\n\nData frames support adding new columns by passing to an assignment operation a new column name:\n\ndf$height &lt;- c(165, 180, 175)\nprint(df)\n\n    name age is_student height\n1   Jean  25       TRUE    165\n2 Thomas  30      FALSE    180\n3 Daniel  35      FALSE    175\n\n\nAnd adding new rows using rbind:\n\ndf &lt;- rbind(df, c(\"Patricia\",18,FALSE,160) )\nprint(df)\n\n      name age is_student height\n1     Jean  25       TRUE    165\n2   Thomas  30      FALSE    180\n3   Daniel  35      FALSE    175\n4 Patricia  18      FALSE    160\n\n\n\n\n\n\n\n\nNoteExercise\n\n\n\nGiven the below dataframe, add some more items in it:\nname,   age, student\nKate,    41,   Y\nSarah,   62,   N\nMaddie,  33,   Y\nJames,   19,   Y\nAfter, create another dataframe with only the name and student status for the first 3 person.\n\ndf &lt;- data.frame(\n  name = c(\"Jean\", \"Thomas\", \"Daniel\"),\n  age = c(25, 30, 35),\n  is_student = c(TRUE, FALSE, FALSE)\n)\n\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\nWe can do this in different ways, using rbind and adding row by row, or creating another dataframe and binding both together.\n\ndf &lt;- data.frame(\n  name = c(\"Jean\", \"Thomas\", \"Daniel\"),\n  age = c(25, 30, 35),\n  is_student = c(TRUE, FALSE, FALSE)\n)\n\ndf &lt;- rbind(df, c(\"Kate\",    41,   TRUE) )\n\nnewdata &lt;- data.frame(\n  name = c(\"Sarah\", \"Maddie\", \"James\"),\n  age = c(62, 33, 19),\n  is_student = c(FALSE, TRUE, TRUE)\n)\n\ndf &lt;- rbind(df, newdata)\n\nprint(df)\n\n    name age is_student\n1   Jean  25       TRUE\n2 Thomas  30      FALSE\n3 Daniel  35      FALSE\n4   Kate  41       TRUE\n5  Sarah  62      FALSE\n6 Maddie  33       TRUE\n7  James  19       TRUE\n\n\nDataframes can index the rows and columns we want using square brakets [rows,columns].\n\ndf2 &lt;- df[1:3,c(1,3)]\n\nprint(df2)\n\n    name is_student\n1   Jean       TRUE\n2 Thomas      FALSE\n3 Daniel      FALSE",
    "crumbs": [
      "Variables and data types",
      "Data structures"
    ]
  },
  {
    "objectID": "pages/033-data-structures.html#errors-while-working-with-data-stuctures",
    "href": "pages/033-data-structures.html#errors-while-working-with-data-stuctures",
    "title": "Data structures",
    "section": "Errors while working with data stuctures",
    "text": "Errors while working with data stuctures\nIt is very likely that indexing lists is the first time you will see a R error. Seing R errors (also sometimes called exceptions) is not a sign that you’re a bad programmer or that you’re doing something terrible. Even experienced programmers see R errors on their screen.\nError messages are in fact a very useful feedback mechanism for the programmer but that can be a bit daunting when you first see them. Let’s recreate a typical error message: a dataframe with three columns will not have a column at index 6 (the highest index in that case would be 3) and produce an error if we ask for it.\n\n\n\ndataframe.R\n\ndf &lt;- data.frame(\n  name = c(\"Jean\", \"Thomas\", \"Daniel\"),\n  age = c(25, 30, 35),\n  is_student = c(TRUE, FALSE, FALSE)\n)\n\ncat(df[,6])\n\n\nError in `[.data.frame`(df, , 6): undefined columns selected\n\n\nLikewise, it will return an error if there’s no matching column name.\n\ncat(df[,\"Will\"])\n\nError in `[.data.frame`(df, , \"Will\"): undefined columns selected\n\n\nIn this last case, has two parts to it. The first is the words before the colon which tells you where the error was found. The second part of that line is usually a slightly more descriptive message, in this case telling us that the specific problem was that the column selected is not known.\nTake your time to read the error messages when they are printied to the screen, they will most likely help you solve the issue. If you think that you’ve fixed the problem but the error persists, make sure that you’ve saved the script file and rerun your code afterwards.\n\n\n\n\n\n\nNoteExercise\n\n\n\nWhat happens if you try to print df[12,6]in the above example?\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\nWhen trying to access individual elements, R returns an empty object but not an error.\n\ncat(df[12,6])",
    "crumbs": [
      "Variables and data types",
      "Data structures"
    ]
  },
  {
    "objectID": "pages/010-workspace-setup.html",
    "href": "pages/010-workspace-setup.html",
    "title": "Workspace setup",
    "section": "",
    "text": "Please follow our installation instructions.\nOnce you’ve gone through those, you should be ready to get started!!",
    "crumbs": [
      "Workspace setup"
    ]
  },
  {
    "objectID": "pages/980-summary.html",
    "href": "pages/980-summary.html",
    "title": "Summary",
    "section": "",
    "text": "Well done for getting this far! We’ve covered a lot in this course:\n\nHow to set up a R workspace with RStudio\nUsing the cat() and print() functions\nBasic data types (integers, floats, strings, boolean)\nIntroduction to data structures\nConditional branching using if statements\nLooping with for and while\nReading csv files\n\nYou’re not expected to have committed all of this to memory already, learning any programming language takes more than three hours. It is only by continuing to use R and practise that you will become confident. These notes will remain online so feel free to refer back to them at any time.",
    "crumbs": [
      "Summary"
    ]
  },
  {
    "objectID": "pages/050-control-structures.html",
    "href": "pages/050-control-structures.html",
    "title": "Control structures",
    "section": "",
    "text": "Earlier you were told that R will read your script starting at the top and running each line of code until it reaches the bottom. While largely true, real code will use control structures to create dynamic and structured programs capable of handling complex tasks while keeping the code more readable and understandable, which is crucial for collaboration, maintenance, and debugging.\n\n\n\nAdapted from: This Is A Book, by Demetri Martin\n\n\nImagine that you want to process your data in different ways depending if your samples are above or not of a certain value, for example:\nLOOP FOR EACH sample IN my_study\n    IF  sample value &gt; 100\n        DO SOMETHING\n    OTHERWISE\n        DO SOMETHING ELSE\nIn essence, control structures are fundamental building blocks that enable programmers to create logically structured programs. Flow control structures, such as if, allow programmers to dictate the order and conditions under which specific instructions are executed within a program. Looping structures, such as for and while, enable the repetition of code blocks, which is crucial for tasks that require iterating through data performing calculations multiple items.",
    "crumbs": [
      "Control structures"
    ]
  },
  {
    "objectID": "pages/032-operators.html",
    "href": "pages/032-operators.html",
    "title": "Operators",
    "section": "",
    "text": "Operators are essential for performing various operations on variables and values. You may want to multiply two numbers or compare them to know which one is greater, and operators allow us to do it.\n\nArithmetic Operators\nArithmetic operators can be used with numerical variables such as int and float.\n\n\n\nDescription\nOperator\nExample\n\n\n\n\nAddition\n+\na + b\n\n\nSubtraction\n-\na - b\n\n\nMultiplication\n*\na * b\n\n\nDivision\n/\na / b\n\n\nFloor Division\n%/%\na %/% b\n\n\nModulo\n%%\na %% b\n\n\nExponentiation\n^\na ^ b\n\n\n\na &lt;- 9\nb &lt;- 2\n\ncat('Subtraction:', a - b)\ncat('Division:', a / b)\ncat('Floor Division:', a %/% b)\ncat('Modulo:', a %% b)\ncat('Power:', a ^ b)\n\n\nSubtraction: 7\n\n\nDivision: 4.5\n\n\nFloor Division: 4\n\n\nModulo: 1\n\n\nPower: 81\n\n\n\n\nComparison Operators\nWe can compare two variables (or a variable and a value) using comparison operators. They are applicable to numerical variables, strings and booleans.\n\n\n\nDescription\nOperator\nExample\n\n\n\n\nEqual To\n==\na == b\n\n\nNot Equal To\n!=\na != b\n\n\nGreater Than\n&gt;\na &gt; b\n\n\nLess Than\n&lt;\na &lt; b\n\n\nGreater Than or Equal To\n&gt;=\na &gt;= b\n\n\nLess Than or Equal To\n&lt;=\na &lt;= b\n\n\n\na &lt;- 5\nb &lt;- 2\n\ncat(\"Equal To:\", a == b)\ncat(\"Less Than:\", a &gt; b)\ncat(\"Not Equal To:\", a != b)\ncat(\"Greater Than:\", a &lt; b)\n\n\nEqual To: FALSE\n\n\nGreater Than: TRUE\n\n\nNot Equal To: TRUE\n\n\nLess Than: FALSE\n\n\n\n\nLogical Operators\nLogical operators are used to combine conditional statements or negate them, and can only be applied to booleans.\n\n\n\nDescription\nOperator\nExample\n\n\n\n\nLogical AND (element-wise)\n&\n(a == b) & (a &gt; c)\n\n\nLogical AND\n&&\n(a == b) && (a &gt; c)\n\n\nLogical OR (element-wise)\n|\n(a &gt; b) | (a &lt; c)\n\n\nLogical OR\n||\n(a &gt; b) || (a &lt; c)\n\n\nLogical NOT\n!\n!(a &gt; b)\n\n\n\na &lt;- 5\nb &lt;- 2\nc &lt;- 4\n\ncat(\"(a==b) AND (a&gt;c)\", (a==b) & (a&gt;c))\ncat(\"(a&gt;b) OR (a&lt;c)\", (a&gt;b) | (a&lt;c))\ncat(\"NOT (a&gt;b):\", !(a&gt;b))\n\n\n(a==b) AND (a&gt;c): FALSE\n\n\n(a&gt;b) OR (a&lt;c): TRUE\n\n\nNOT (a&gt;b): FALSE\n\n\n\n\n\n\n\n\nNoteExercise\n\n\n\nDefine two strings str1 &lt;- \"Tuesday\" and str2 &lt;- \"Wednesday\", and compare them (e.g. equal, greater and less than).\n\n\n\n\n\n\n\n\nCautionAnswer\n\n\n\n\n\n\nstr1 &lt;- \"Tuesday\"\nstr2 &lt;- \"Wednesday\"\n\ncat(str1,\"equal to\",str2,\":\",str1==str2)\n\nTuesday equal to Wednesday : FALSE\n\ncat(str1,\"greater than\",str2,\":\",str1&gt;str2)\n\nTuesday greater than Wednesday : FALSE\n\ncat(str1,\"less than\",str2,\":\",str1&lt;str2)\n\nTuesday less than Wednesday : TRUE\n\n\nIt is easy undersand that the operator == returns TRUE if two strings are the same. But what do &gt; and &lt;?\nR doesn’t understand the meaning of works “Tuesday” and “Wednesday”, they are just two chains of characters. The operator &gt; will return TRUE if the string str1 comes after alphabetically than str2, and &lt; will return TRUE if the string str1 comes before alphabetically than str2. These operations are case-sensitive.",
    "crumbs": [
      "Variables and data types",
      "Operators"
    ]
  }
]